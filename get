#include "shell.h"

/**
 * _unsetenv - Remove an environment variable
 * @infos: Struct containing arguments, used to maintain.
 * @vari: String environment variable property
 *
 * Return: 1 if deleted, 0 otherwise
 */
int _unsetenv(info_t *infos, char *vari)
{
	list_t *node = infos->env;
	size_t index = 0;
	char *ptr;

	if (!node || !vari)
		return (0);

	while (node)
	{
		ptr = starts_with(node->str, vari);

		if (ptr && *ptr == '=')
		{
			infos->env_changed = delete_node_at_index(&(infos->env), index);
			index = 0;
			node = infos->env;
			continue;
		}

		node = node->next;
		index++;
	}

	return (infos->env_changed);
}

/**
 * _setenv - Initialize new environment variable,
 * or modify an existing one
 * @infos: Struct containing arguments, used to maintain.
 * @vari: String environment variable property
 * @values: String environment variable value
 *
 * Return: Always 0
 */
int _setenv(info_t *infos, char *vari, char *values)
{
	char *buffer = NULL;
	list_t *node;
	char *ptr;

	if (!vari || !values)
		return (0);

	buffer = malloc(_strlen(vari) + _strlen(values) + 2);

	if (!buffer)
		return (1);

	_strcpy(buffer, vari);
	_strcat(buffer, "=");
	_strcat(buffer, values);

	node = infos->env;

	while (node)
	{
		ptr = starts_with(node->str, vari);

		if (ptr && *ptr == '=')
		{
			free(node->str);
			node->str = buffer;
			infos->env_changed = 1;
			return (0);
		}

		node = node->next;
	}

	add_node_end(&(infos->env), buffer, 0);
	free(buffer);
	infos->env_changed = 1;
	return (0);
}

/**
 * get_environ - gets value of environment variable
 * @infos: Struct containing arguments, used to maintain.
 *
 * Return: Always 0
 */
char **get_environ(info_t *infos)
{
	if (!infos->environ || infos->env_changed)
	{
		infos->environ = list_to_strings(infos->env);
		infos->env_changed = 0;
	}

	return (infos->environ);
}

